#include "imports/stdlib.fc";

{-

Contract Store:
  - public_key: uint256
  - execution_time: uint32
  - receiver: MsgAddressInt
  - seqno: uint32
  
update#9df10277 signature:bits512 ^[ locked_for:uint32 new_seqno:uint32 ] = ExtInMsgBody

claim#bb4be234 = ExtInMsgBody

-}

(int, int, slice, int) load_data() inline {
  var ds = get_data().begin_parse();
  return (ds~load_uint(256), ds~load_uint(32), ds~load_msg_addr(), ds~load_uint(32));
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {

}

() recv_external(slice in_msg) impure {

  var op = in_msg~load_uint(32);

  if (op == 0x9df10277) {
 
    var (public_key, execution_time, receiver, seqno) = load_data();

    var signature = in_msg~load_bits(512);
    var c = in_msg~load_ref();
    var sig_ok = check_signature(cell_hash(c), signature, public_key);

    var cd = c.begin_parse();
    var (locked_for, new_seqno) = (cd~load_uint(32), cd~load_uint(32));

    throw_unless(119, new_seqno == (seqno + 1));
    throw_unless(120, sig_ok);
    throw_unless(121, locked_for > 0);
    throw_if(122, execution_time < now());
    
    var new_execution_time = now() + locked_for;
    throw_if(123, new_execution_time < execution_time);

    accept_message();

    set_data(begin_cell()
      .store_uint(public_key, 256)
      .store_uint(new_execution_time, 32)
      .store_slice(receiver)
      .store_uint(new_seqno, 32)
      .end_cell());
  }
}

int get_seqno() method_id {
  var (_, _, _, seqno) = load_data();
  return seqno;
}

int get_execution_time() method_id {
  var (_, execution_time, _, _) = load_data();
  return execution_time;
}