#include "imports/stdlib.fc";

;; This saves 18+18 gas, because store_slice compiles to SWAP STSLICER,
;;   but STSLICER is equivalent on SWAP STSLICE, so original store_slice equal to SWAP SWAP STSLICE :)
builder store_to(slice s, builder b) asm "STSLICE";

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {

}

() recv_external(slice in_msg) impure {

  var op = in_msg~load_uint(32);
  
  if (op == 0x9df10277) {
 
    var ds = get_data().begin_parse();
    var (public_key, execution_time, receiver, seqno) = (ds~load_uint(256), ds~load_uint(32), ds~load_msg_addr(), ds.preload_uint(32));
    var expected_new_seqno = seqno + 1;

    var query_id = in_msg~load_uint(64);
    var signature = in_msg~load_bits(512);

    var c = in_msg.preload_ref();
    var cd = c.begin_parse();
    var (locked_for, new_seqno) = (cd~load_uint(32), cd.preload_uint(32));

    throw_unless(119, new_seqno == expected_new_seqno);
    throw_unless(120, check_signature(cell_hash(c), signature, public_key));
    throw_unless(121, locked_for > 0);

    var n = now();
    throw_if(122, n > execution_time);
    
    var new_execution_time = locked_for + n;
    throw_if(123, new_execution_time < execution_time);

    accept_message();

    var ds = begin_cell()
      .store_uint(public_key, 256)
      .store_uint(new_execution_time, 32);
    ds = receiver.store_to(ds);
    set_data(ds.store_uint(new_seqno, 32).end_cell());
      
    return();
  }

  if (op == 0xbb4be234) {

    var ds = get_data().begin_parse();
    var (_, execution_time, receiver) = (ds~load_uint(256), ds~load_uint(32), ds~load_msg_addr());

    throw_unless(124, execution_time < now());

    accept_message();

    var msg = begin_cell()
      .store_uint(0x18, 6);
    msg = receiver.store_to(msg);
    msg = msg
      .store_coins(0)
      .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1);
      
    send_raw_message(msg.end_cell(), 128);
    
    return();
  }
}

int get_seqno() method_id {
  return get_data().begin_parse().slice_last(32).preload_uint(32);
}

int get_execution_time() method_id {
  var ds = get_data().begin_parse();
  ds~load_bits(256);
  return ds.preload_uint(32);
}