#include "imports/stdlib.fc";

{-

Contract Store:
  - public_key: uint256
  - execution_time: uint32
  - receiver: uint32
  - seqno: uint32
  
update#9df10277 signature:bits512 ^[ locked_for:uint32 new_seqno:uint32 ] = ExtInMsgBody

take_ownership#bb4be234 public_key:uint256 = ExtInMsgBody

-}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {

}

() recv_external(slice in_msg) impure {

  var op = in_msg~load_uint(32);

  if (op == 0x9df10277) {
 
    var ds = get_data().begin_parse();
    var (public_key, execution_time, receiver, seqno) = (ds~load_uint(256), ds~load_uint(32), ds~load_msg_addr(), ds~load_uint(32));
    ds.end_parse();

    var signature = in_msg~load_bits(512);
    var c = in_msg.preload_ref();
    var sig_ok = check_signature(cell_hash(c), signature, public_key);

    var cd = c.begin_parse();
    var (locked_for, new_seqno) = (cd~load_uint(32), cd~load_uint(32));

    throw_unless(119, new_seqno == (seqno + 1));
    throw_unless(120, sig_ok);

    accept_message();

    throw_unless(121, locked_for > 0);
    throw_unless(122, execution_time >= now());
    throw_unless(123, (now() + locked_for) >= execution_time);

    set_data(begin_cell()
      .store_uint(public_key, 256)
      .store_uint(now() + locked_for, 32)
      .store_slice(receiver)
      .store_uint(new_seqno, 32)
      .end_cell());
      
    return();
  }

  if (op == 0xbb4be234) {

    var ds = get_data().begin_parse();
    var (_, execution_time, receiver, _) = (ds~load_uint(256), ds~load_uint(32), ds~load_msg_addr(), ds~load_uint(32));
    ds.end_parse();

    throw_unless(124, execution_time < now());

    var msg = begin_cell()
      .store_uint(0x18, 6)
      .store_slice(receiver)
      .store_coins(0)
      .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
      .end_cell();
      
    send_raw_message(msg, 128);
    
    return();
  }
  
  throw(0xffff);
}

int get_seqno() method_id {
  var ds = get_data().begin_parse();
  var (_, _, _, seqno) = (ds~load_uint(256), ds~load_uint(32), ds~load_msg_addr(), ds~load_uint(32));
  return seqno;
}

int get_execution_time() method_id {
  var c = get_data().begin_parse();
  c~skip_bits(256);
  return c~load_uint(32);
}