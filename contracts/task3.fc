#include "imports/stdlib.fc";


;; All the code in recv_internal, get_storage, wrap_storage, and version
;; serves as an example of the intended structure.

;; The provided code is an "empty wrapper." It:
;; + Parses "wrapped" incoming messages (discards versioning information)
;; + "Wraps" the call to the version-specific process_message
;; + Implements "get_storage" for version-specific get-methods
;; However, it does not yet implement any upgrade logic, which is your task.

;; The empty wrapper is provided to demonstrate
;; how version-specific code is intended to be "wrapped" and interacted with.
;; You may delete and rewrite as needed,
;; but the final implementation must adhere to the same structure


cell get_storage() inline {
  return get_data().begin_parse().preload_ref();
}

cell wrap_storage(int version_id, cell storage) inline {
  return begin_cell()
    .store_uint(version_id, 32)
    .store_ref(storage)
    .end_cell();
}

;; TL-B:
;;   _ new_version:uint32 migration_code:(Maybe ^Cell) = MigrationPayload;
;;   _ expected_version:uint32 new_code:(Maybe ^Cell) migrations:(HashmapE 32 MigrationPayload) payload:^Cell = InternalMsgBody;

cell process_message(cell storage, int msg_value, int balance, cell in_msg_full, slice in_msg_body);
cell migrate_one(cell old_storage);

() recv_internal(int msg_value, int balance, cell in_msg_full, slice in_msg_body) impure {
  int expected_ver = in_msg_body~load_uint(32);            ;; Expected version
  ifnot (expected_ver) {
    set_data(begin_cell()
            .store_uint(1, 32)
            .store_ref(get_data())
            .end_cell());
    return();
  }

  cell code = in_msg_body~load_maybe_ref();                ;; Expected code
  cell migs = in_msg_body~load_dict();                     ;; Migrations
  cell payload = in_msg_body.preload_ref();
  
  slice cs = get_data().begin_parse();
  var stored_ver = cs~load_uint(32);
  var storage = cs.preload_ref();
  
  ifnot (expected_ver == stored_ver) {
    throw_if(200, null?(code));

    do {
      var (mig, found) = migs.udict_get?(32, stored_ver);
      ifnot (found) { throw(400); }
      stored_ver = mig~load_uint(32);
      var migcode = mig.preload_maybe_ref();
      ifnot (null?(migcode)) {
        set_c3(bless(migcode.begin_parse()));
        storage = migrate_one(storage);
      }
    } until (stored_ver == expected_ver);
    
    set_code(code);                                         ;; save for future invocations
    set_c3(bless(code.begin_parse()));                      ;; for current invocation of process_message
  }

  storage = process_message(storage, msg_value, balance, in_msg_full, payload.begin_parse());

  set_data(begin_cell()
          .store_uint(stored_ver, 32)
          .store_ref(storage)
          .end_cell());
}

;; Return the current version of the smart contract
int version() method_id {
  return get_data().begin_parse().preload_uint(32);
}

;; <<<<< Custom version-specific code begins
;; This section (everything between << and >> characters) will be fully substituted for each version.
;; This is an IMPORTANT part, and these exact lines with <<<<< and >>>>> must be present in your code for the testing system to work correctly.
;; All the code provided here serves as an example of the version-code, which your update code must be compatible with.
;; Refer to the "3-example" directory for more version examples.

;; from counter-v0.fc
cell process_message(cell storage, int msg_value, int balance, cell in_msg_full, slice in_msg_body) impure {
    slice cs = storage.begin_parse();
    int current_amount = cs.preload_uint(32);
    return begin_cell().store_uint(current_amount + 1, 32).end_cell();
}

cell migrate_one(cell old_storage) { ;; it's just a placeholder that is required for correct compilation
    return old_storage;
}

;; Custom version-specific code ends >>>>>

