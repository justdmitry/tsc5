#include "imports/stdlib.fc";

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {

}

int len(tuple src) asm "TLEN";
(tuple) cons_int(int a, int b) asm "CONS";
(int, int) uncons_int(tuple src) asm "UNCONS";
forall X, Y, Z -> tuple triple_tup(X x, Y y, Z z) asm "TRIPLE";
forall X, Y, Z -> (X, Y, Z) untriple_tup(tuple t) asm "UNTRIPLE";
forall X -> (tuple) replace(tuple src, X value, int index) asm "SETINDEXVAR";

const int path:free  = "."u;  ;; no obstacles
const int path:obst  = "X"u;  ;; obstacle
const int path:osup  = "?"u;  ;; obstacle in superposition
const int path:start = "S"u;  ;; start
const int path:end   = "E"u;  ;; end
const int path:path  = "!"u;  ;; path mark

const int costs:free = 1;
const int costs:osup = 500;
const int costs:obst = 1000000;
const int costs:unknown = 999999999999;

;; copy of input data for easier access
global tuple input_data;

;; cost of step into each cell
global tuple maze_prices;

;; cost of best path from start to each cell
global tuple maze_costs;

;; coords of Start and End
global int startX;
global int startY;
global int endX;
global int endY;
global int bestEnd;

;; list of available moves (eight)
global tuple steps;

() prepare(tuple maze, int n, int m) impure inline {
  input_data = cons_int(n, m);
  var new_costs = empty_tuple();
  var new_prices = empty_tuple();
  int r = 0;
  repeat(n) {
    var row = maze.at(r);
    var cost_row = empty_tuple();
    var price_row = empty_tuple();
    int c = 0;
    repeat(m) {
      var cost = costs:unknown;
      var price = costs:free;
      var char = row.at(c);
      if (char == path:start) {
        startX = r;
        startY = c;
        cost = 0;
        price = 0;
      }
      if (char == path:end) {
        endX = r;
        endY = c;
      }
      if (char == path:obst) { price += costs:obst; }
      if (char == path:osup) { price += costs:osup; }
      price_row~tpush(price);
      cost_row~tpush(cost);
      c += 1;
    }
    new_costs~tpush(cost_row);
    new_prices~tpush(price_row);
    r += 1;
  }
  maze_costs = new_costs;
  maze_prices = new_prices;
  
  var new_steps = empty_tuple();
  new_steps~tpush(cons_int(-1,  0));
  new_steps~tpush(cons_int( 0, -1));
  new_steps~tpush(cons_int( 0,  1));
  new_steps~tpush(cons_int( 1,  0));
  new_steps~tpush(cons_int(-1, -1));
  new_steps~tpush(cons_int(-1,  1));
  new_steps~tpush(cons_int( 1, -1));
  new_steps~tpush(cons_int( 1,  1));
  steps = new_steps;

  bestEnd = costs:unknown;
}


(tuple) do_step(tuple locs, tuple loc) impure inline {
  var (x, y) = uncons_int(loc);
  var (n, m) = uncons_int(input_data);
  var costs = maze_costs;
  var cost = costs.at(x).at(y);
  if (cost >= bestEnd) { return locs; }
  var i = 0;
  repeat(8) {     ;; steps.len
    var (dx, dy) = uncons_int(steps.at(i));
    var x2 = x + dx;
    var y2 = y + dy;
    ifnot ((min(x2, y2) < 0) | (x2 >= n) | (y2 >= m)) {
      var price = maze_prices.at(x2).at(y2);
      var newCost = price + cost;
      var wrow = costs.at(x2);
      var oldCost = wrow.at(y2);
      if (oldCost > newCost) {
        wrow = replace(wrow, newCost, y2);
        costs = replace(costs, wrow, x2);
        if ((x2 == endX) & (y2 == endY)) {
          bestEnd = newCost;
        } 
        else 
        {
          locs~tpush(cons_int(x2, y2));
        }
      }
    }
    i += 1;
  }
  maze_costs = costs;
  return locs;
} 

(tuple) mark_path(tuple maze) {
  var (n, m) = uncons_int(input_data);
  int x = endX;
  int y = endY;
  int cost = bestEnd;
  while (1) {
    var mx = 0;
    var my = 0;
    var i = 0;
    repeat(8) {     ;; steps.len
      var (dx, dy) = uncons_int(steps.at(i));
      var x2 = x + dx;
      var y2 = y + dy;
      ifnot ((min(x2, y2) < 0) | (x2 >= n) | (y2 >= m)) {
        var mc = maze_costs.at(x2).at(y2);
        ifnot (mc) { return maze; }   ;; this is Start
        if (mc < cost) {
          cost = mc;
          mx = x2;
          my = y2;
        }
      }
      i += 1;
    }
    
    var row = maze.at(mx);
    row = replace(row, path:path, my);
    maze = replace(maze, row, mx);
    x = mx;
    y = my;
  }
  
  return maze;
}

(int, int, int, tuple) solve(int n, int m, tuple maze) method_id {
  
  ;; 2x2 is always already solved!
  if ((n * m) == 4) {
    return (0, 0, 1, maze);
  }

  prepare(maze, n, m);
  
  ;; solve
  var locs = empty_tuple();
  locs~tpush(cons_int(startX, startY));
  while (locs.len()) {
    var newlocs = empty_tuple();
    var i = 0;
    repeat(locs.len()) {
      var loc = locs.at(i);
      newlocs = do_step(newlocs, loc);
      i += 1;
    }
    locs = newlocs;
  }

  ;; get path metrics

  var solved = mark_path(maze);

  (var changes, var suplen) = divmod(bestEnd, costs:obst);
  (var superpos, var length) = divmod(suplen, costs:osup);
  
  return (changes, superpos, length, solved);
}