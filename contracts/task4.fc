#include "imports/stdlib.fc";

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {

}

int len(tuple src) asm "TLEN";
(tuple) cons_int(int a, int b) asm "CONS";
(int, int) uncons_int(tuple src) asm "UNCONS";

const int path:free  = "."u;  ;; no obstacles
const int path:obst  = "X"u;  ;; obstacle
const int path:osup  = "?"u;  ;; obstacle in superposition
const int path:start = "S"u;  ;; start
const int path:end   = "E"u;  ;; end
const int path:path  = "!"u;  ;; path mark

const int costs:free = 1;
const int costs:osup = 500;
const int costs:obst = 1000000;
const int costs:unknown = 999999999999;

;; cost of step into each cell
global tuple maze_prices;

;; cost of best path from start to each cell
global tuple maze_costs;

;; coords of Start and End
global int startX;
global int startY;
global int endX;
global int endY;

;; list of available moves (eight)
global tuple steps;

forall X -> (tuple, ()) ~replace(tuple src, int index, X value) inline {
  var i = 0;
  var res = empty_tuple();
  repeat(src.len()) {
    res~tpush(index == i ? value : src.at(i));
    i += 1;
  };
  return (res, ());
} 

() prepare(int n, int m, tuple maze) impure inline {
  var new_costs = empty_tuple();
  var new_prices = empty_tuple();
  int r = 0;
  repeat(n) {
    var row = maze.at(r);
    var cost_row = empty_tuple();
    var price_row = empty_tuple();
    int c = 0;
    repeat(m) {
      var cost = costs:unknown;
      var price = costs:free;
      var char = row.at(c);
      if (char == path:start) {
        startX = r;
        startY = c;
        cost = 0;
        price = 0;
      }
      if (char == path:end) {
        endX = r;
        endY = c;
      }
      if (char == path:obst) { price += costs:obst; }
      if (char == path:osup) { price += costs:osup; }
      price_row~tpush(price);
      cost_row~tpush(cost);
      c += 1;
    }
    cost_row~tpush(costs:unknown);              ;; extra col to ignore right bound check
    new_costs~tpush(cost_row);
    price_row~tpush(0);                         ;; extra col to ignore right bound check
    new_prices~tpush(price_row);
    r += 1;
  }
  
  var cost_rowex = empty_tuple();               ;; extra row to ignore bottom bound check
  var price_rowex = empty_tuple();              ;; extra row to ignore bottom bound check
  repeat(m + 1) {
    cost_rowex~tpush(costs:unknown);
    price_rowex~tpush(0);
  }
  new_costs~tpush(cost_rowex);
  new_prices~tpush(price_rowex);

  maze_costs = new_costs;
  maze_prices = new_prices;
  
  var new_steps = empty_tuple();
  new_steps~tpush(cons_int(-1, -1));
  new_steps~tpush(cons_int(-1,  0));
  new_steps~tpush(cons_int(-1,  1));
  new_steps~tpush(cons_int( 0, -1));
  new_steps~tpush(cons_int( 0,  1));
  new_steps~tpush(cons_int( 1, -1));
  new_steps~tpush(cons_int( 1,  0));
  new_steps~tpush(cons_int( 1,  1));
  steps = new_steps;
}


(tuple) do_step(tuple locs, tuple loc) impure inline {
  var (x, y) = uncons_int(loc);
  var costs = maze_costs;
  var cost = costs.at(x).at(y);
  var i = 0;
  repeat(8) {     ;; steps.len
    var (dx, dy) = uncons_int(steps.at(i));
    var x2 = x + dx;
    var y2 = y + dy;
    ifnot (min(x2, y2) < 0) {
      var price = maze_prices.at(x2).at(y2);
      if (price) {
        var newCost = cost + price;
        var wrow = costs.at(x2);
        var oldCost = wrow.at(y2);
        if (oldCost > newCost) {
          wrow~replace(y2, newCost);
          costs~replace(x2, wrow);
          locs~tpush(cons_int(x2, y2));
        }
      }
    }
    i += 1;
  }
  maze_costs = costs;
  return locs;
} 

(tuple) mark_path(tuple maze, int x, int y, int cost) {
  var mx = 0;
  var my = 0;
  var i = 0;
  repeat(8) {     ;; steps.len
    var (dx, dy) = uncons_int(steps.at(i));
    var x2 = x + dx;
    var y2 = y + dy;
    ifnot (min(x2, y2) < 0) {
      var mc = maze_costs.at(x2).at(y2);
      ifnot (mc) { return maze; }   ;; this is Start
      if (mc < cost) {
        cost = mc;
        mx = x2;
        my = y2;
      }
    }
    i += 1;
  }
  
  var row = maze.at(mx);
  row~replace(my, path:path);
  maze~replace(mx, row);
  return mark_path(maze, mx, my, cost); 
}

(int, int, int, tuple) solve(int n, int m, tuple maze) method_id {
  
  ;; 2x2 is always already solved!
  if ((n * m) == 4) {
    return (0, 0, 1, maze);
  }

  prepare(n, m, maze);
  
  ;; solve
  var locs = empty_tuple();
  locs~tpush(cons_int(startX, startY));
  while (locs.len()) {
    var newlocs = empty_tuple();
    var i = 0;
    repeat(locs.len()) {
      var loc = locs.at(i);
      newlocs = do_step(newlocs, loc);
      i += 1;
    }
    locs = newlocs;
  }

  ;; get path metrics
  var cost = maze_costs.at(endX).at(endY);
  (var changes, var suplen) = divmod(cost, costs:obst);
  (var superpos, var length) = divmod(suplen, costs:osup);
  
  var solved = mark_path(maze, endX, endY, cost);

  return (changes, superpos, length, solved);
}