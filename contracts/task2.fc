#include "imports/stdlib.fc";

int equal_slices(slice a, slice b) asm "SDEQ";

(slice, cell) load_data() impure {
  slice ds = get_data().begin_parse();
  return (ds~load_msg_addr(), ds.preload_dict());
}

() save_data(slice admin_address, cell users) impure {
  set_data(begin_cell().store_slice(admin_address).store_dict(users).end_cell());
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {

}

cell get_users() {
  var (_, users) = load_data();
  return users;
}

int get_user_share(slice user_address) method_id {
  var (wc, bits) = parse_std_addr(user_address);
  var (_, users) = load_data();
  var (share, ok) = users.udict_get?(256, bits);
  if (ok) { return share.preload_uint(32); }
  return 0;
}