#include "imports/stdlib.fc";

int equal_slices(slice a, slice b) asm "SDEQ";

(slice, cell) load_data() inline {
  slice ds = get_data().begin_parse();
  return (ds~load_msg_addr(), ds~load_dict());
}

() save_data(slice admin_address, cell users) impure inline {
  set_data(begin_cell().store_slice(admin_address).store_dict(users).end_cell());
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
  var cs = in_msg_full.begin_parse();
  var flags = cs~load_uint(4);
  if (flags & 1) { return(); }  ;; ignore bounced
  var sender_address = cs~load_msg_addr();

  var (admin_address, users) = load_data();

  var bs = in_msg_body;
  var op = bs~load_uint(32);

  ;; add_user#368ddef3 query_id:uint64 address:MsgAddressInt share:uint32 = InternalMsgBody;
  if (op == 0x368ddef3) {
    throw_unless(120, equal_slices(sender_address, admin_address));
    _ = bs~load_uint(64);
    var adr = bs~load_msg_addr();
    var share = bs~load_uint(32);
    var (wc, bits) = parse_std_addr(adr);
    users~udict_set(256, bits, begin_cell().store_uint(share, 32).end_cell().begin_parse());
    save_data(admin_address, users);
    return();
  }
  
  ;; remove_user#278205c8 query_id:uint64 address:MsgAddressInt = InternalMsgBody;
  if (op == 0x278205c8) {
    throw_unless(120, equal_slices(sender_address, admin_address));
    _ = bs~load_uint(64);
    var (wc, bits) = parse_std_addr(bs~load_msg_addr());
    var ok = users~udict_delete?(256, bits);
    throw_unless(121, ok);
    save_data(admin_address, users);
    return();
  }

  ;; split_ton#68530b3 query_id:uint64 = InternalMsgBody;
  if (op == 0x068530b3) {
    throw_if(122, users.dict_empty?());
  }

  ;; transfer_notification#0x7362d09c query_id:uint64 amount:Coins = InternalMsgBody;
  if (op == 0x7362d09c) {
    throw_if(122, users.dict_empty?());
  }
  
  throw(0xffff);
}

cell get_users() method_id {
  var (_, users) = load_data();
  return users;
}

int get_user_share(slice user_address) method_id {
  var (wc, bits) = parse_std_addr(user_address);
  var (_, users) = load_data();
  var (share, ok) = users.udict_get?(256, bits);
  if (ok) { return share.preload_uint(32); }
  return 0;
}