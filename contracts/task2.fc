#include "imports/stdlib.fc";

{-

Messages:
  add_user#368ddef3 query_id:uint64 address:MsgAddressInt share:uint32 = InternalMsgBody;
  remove_user#278205c8 query_id:uint64 address:MsgAddressInt = InternalMsgBody;
  split_ton#68530b3 query_id:uint64 amount:Coins = InternalMsgBody;
  transfer_notification#701c09a6 query_id:uint64 amount:Coins = InternalMsgBody;

Storage:
  admin_address: MsgAddressInt
  users: (HashmapE 267 uint32)
  
-}

int equal_slices(slice a, slice b) asm "SDEQ";
(slice, int) dict_get?(cell dict, int key_len, slice index) asm(index dict key_len) "DICTGET" "NULLSWAPIFNOT";
(cell, int) ~dict_delete?(cell dict, int key_len, slice index) asm(index dict key_len) "DICTDEL";

const int op_add = 0x368ddef3;
const int op_remove = 0x278205c8;
const int op_split = 0x068530b3;
const int op_jetton = 0x7362d09c;

(slice, cell) load_data() impure {
  slice ds = get_data().begin_parse();
  return (ds~load_msg_addr(), ds.preload_dict());
}

() save_data(slice admin_address, cell users) impure {
  set_data(begin_cell().store_slice(admin_address).store_dict(users).end_cell());
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
  var op = in_msg_body~load_uint(32);
  _ = in_msg_body~load_uint(64);

  var (admin_address, users) = load_data();

  var cs = in_msg_full.begin_parse();
  var flags = cs~load_uint(4);
  var sender_address = cs~load_msg_addr();
  
  if (op == op_add) {
    throw_unless(120, equal_slices(sender_address, admin_address));
    var adr = in_msg_body~load_msg_addr();
    var sh = in_msg_body~load_bits(32);
    users~dict_set(267, adr, sh);
    save_data(admin_address, users);
  }
  
  if (op == op_remove) {
    throw_unless(120, equal_slices(sender_address, admin_address));
    var adr = in_msg_body~load_msg_addr();
    var ok = users~dict_delete?(267, adr);
    throw_unless(121, ok);
    save_data(admin_address, users);
  }

  if (op == op_split) {
    throw(122);
  }

  if (op == op_jetton) {
    throw(122);
  }
}

cell get_users() {
  var (_, users) = load_data();
  return users;
}

int get_user_share(slice user_address) method_id {
  var (_, users) = load_data();
  var (share, ok) = users.dict_get?(267, user_address);
  if (ok) { return share.preload_uint(32); }
  return 0;
}