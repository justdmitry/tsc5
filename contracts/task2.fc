#include "imports/stdlib.fc";

int equal_slices(slice a, slice b) asm "SDEQ";
builder store_ref_builder(builder src, builder dest) asm "STBREFR";
int len(tuple src) asm "TLEN";

() save_data(slice admin_address, cell users) impure inline {
  set_data(begin_cell().store_slice(admin_address).store_dict(users).end_cell());
}

(int, tuple) get_total(cell users) inline_ref {
  var total = 0;
  var list = empty_tuple();
  var (k, sh, found) = users.udict_get_min?(256);
  while (found) {
    var share = sh.preload_uint(32);
    list~tpush(pair(k, share));
    total += share;
    (k, sh, found) = users.udict_get_next?(256, k); 
  };
  return (total, list);
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {

  if (in_msg_body.slice_empty?()) { return (); }           ;; ignore empty
  
  var cs = in_msg_full.begin_parse();
  var flags = cs~load_uint(4);
  if (flags & 1) { return(); }                             ;; ignore bounced
  
  var sender_address = cs~load_msg_addr();

  var ds = get_data().begin_parse();
  var (admin_address, users) = (ds~load_msg_addr(), ds.preload_dict());

  var bs = in_msg_body;
  var (op, _) = (bs~load_uint(32), bs~load_uint(64));      ;; op and query_id

  ;; add_user#368ddef3 query_id:uint64 address:MsgAddressInt share:uint32 = InternalMsgBody;
  if (op == 0x368ddef3) {
    throw_unless(120, equal_slices(sender_address, admin_address));
    var adr = bs~load_msg_addr();
    var (_, bits) = parse_std_addr(adr);
    users~udict_set(256, bits, bs);
    save_data(admin_address, users);
    return();
  }
  
  ;; remove_user#278205c8 query_id:uint64 address:MsgAddressInt = InternalMsgBody;
  if (op == 0x278205c8) {
    throw_unless(120, equal_slices(sender_address, admin_address));
    var (_, bits) = parse_std_addr(bs~load_msg_addr());
    var ok = users~udict_delete?(256, bits);
    throw_unless(121, ok);
    save_data(admin_address, users);
    return();
  }

  ;; split_ton#68530b3 query_id:uint64 = InternalMsgBody;
  if (op == 0x068530b3) {
    throw_if(122, users.dict_empty?());
    
    _ = cs~load_msg_addr(); ;; dest
    var coins = cs~load_coins();
    
    var (total, list) = get_total(users);

    var i = 0;
    repeat(list.len()) {
      var pair = list.at(i);
      var (adr, share) = unpair(pair);
      var to_send = muldiv(share, coins, total);
      
      var msg = begin_cell()
        ;; need to store: uint(0x18, 6), then 10 for adr prefix, then 0 for anycast, then 0000_0000 for workchain
        ;; that's: in binary 011000 10 0 00000000 with len 6+2+1+8=17, and in hex it's 0xC400
        .store_uint(0xC400, 17)
        .store_uint(adr, 256)      ;; address bytes (pubkey hash)
        .store_coins(to_send)
        .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1);
      send_raw_message(msg.end_cell(), 1);
      i += 1;
    }
  }

  ;; transfer_notification#0x7362d09c query_id:uint64 amount:Coins = InternalMsgBody;
  if (op == 0x7362d09c) {
    throw_if(122, users.dict_empty?());
    
    var coins = bs~load_coins();
    
    var (total, list) = get_total(users);

    var msg_template = begin_cell()
          .store_uint(0x18, 6)
          .store_slice(sender_address)
          .store_coins(20000000)                                 ;; 0.02
          .store_uint(1, 1 + 4 + 4 + 64 + 32 + 1 + 1);           ;; body in ref
    var body_header = begin_cell()
          .store_uint(0x0f8a7ea50000000000000000, 32 + 64);      ;; opcode and query_id

    var i = 0;
    repeat(list.len()) {
      var pair = list.at(i);
      var (adr, share) = unpair(pair);
      var to_send = muldiv(share, coins, total);
      
      var body = body_header
          .store_coins(to_send)
          .store_uint(0x400, 11).store_uint(adr, 256)            ;; destinations
          .store_uint(0x400, 11).store_uint(adr, 256)            ;; response_destination
          ;; next I need:
          ;;  .store_uint(0, 1)                                  ;; custom_payload
          ;;  .store_coins(1)                                    ;; forward_ton_amount
          ;;  .store_uint(0, 1)                                  ;; forward_payload
          ;; that equals to 0 0001 0000 0001 0, or 0x202
          .store_uint(0x202, 14);
      var msg = msg_template.store_ref_builder(body);
      send_raw_message(msg.end_cell(), 1);
      i += 1;
    }
  }
}

cell get_users() method_id {
  var ds = get_data().begin_parse();
  return ds.slice_refs() ? ds.preload_ref() : null();
}

int get_user_share(slice user_address) method_id {
  var (wc, bits) = parse_std_addr(user_address);
  var users = get_data().begin_parse().preload_ref();
  var (share, _) = users.udict_get?(256, bits);                 ;; doc says we will always have user
  return share.preload_uint(32);
}